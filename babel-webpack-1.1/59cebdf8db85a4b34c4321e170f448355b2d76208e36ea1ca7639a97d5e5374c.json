{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class BlogService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.url = 'http://localhost:9070';\n    this.category = [{\n      name: \"INFORMATION\",\n      value: 0\n    }, {\n      name: \"SPORTS\",\n      value: 1\n    }, {\n      name: \"FUN\",\n      value: 2\n    }, {\n      name: \"DEVOTIONAL\",\n      value: 3\n    }, {\n      name: \"POLITICS\",\n      value: 4\n    }, {\n      name: \"JOBS\",\n      value: 5\n    }];\n  }\n  /* Client Registeration */\n  signUp(body) {\n    return this.http.post(this.url + \"/api/blog/signup\", body);\n  }\n  //client login\n  clientSignIn(body) {\n    return this.http.post(this.url + \"/api/blog/login\", body);\n  }\n  storeAuthorization(token) {\n    localStorage.setItem(\"token\", token);\n  }\n  // This is userId\n  getAuthorization() {\n    const token = localStorage.getItem(\"token\");\n    return token;\n  }\n  storeUserName(name) {\n    localStorage.setItem(\"userName\", name);\n  }\n  getUserName() {\n    const name = localStorage.getItem(\"userName\");\n    return name;\n  }\n  userLogout() {\n    localStorage.clear();\n    this.router.navigate(['']);\n  }\n  storeUserRole(role) {\n    localStorage.setItem(\"role\", role);\n  }\n  getUserRole() {\n    const role = localStorage.getItem(\"role\");\n    return role;\n  }\n  getAllBlogList() {\n    return this.http.get(this.url + \"/api/blog/posts\");\n  }\n  getBlogById(id) {\n    return this.http.get(this.url + \"/api/blog/post/\" + id);\n  }\n  updateBlog(body, blogId, categoryId) {\n    return this.http.put(this.url + \"/api/blog/post/\" + blogId + \"/\" + categoryId, body);\n  }\n  addCommentToBlog(body, blogId, userId) {\n    return this.http.post(this.url + \"/api/blog/comment/\" + blogId + \"/\" + userId, body);\n  }\n  getCommentByBlogId(id) {\n    return this.http.get(this.url + \"/api/blog/comment/\" + id);\n  }\n  deleteBlogById(id) {\n    return this.http.delete(this.url + \"/api/blog/post/\" + id);\n  }\n  getCategoryList() {\n    return this.category;\n  }\n  storeLoggedInUserInformation(user) {\n    localStorage.setItem('user', user);\n  }\n  getLoggedInUserInformation() {\n    return localStorage.getItem('user');\n  }\n  createBlog(body) {\n    return this.http.post(this.url + \"/api/blog/post/\", body);\n  }\n}\nBlogService.ɵfac = function BlogService_Factory(t) {\n  return new (t || BlogService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nBlogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BlogService,\n  factory: BlogService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BlogService","constructor","http","router","name","value","signUp","body","post","url","clientSignIn","storeAuthorization","token","localStorage","setItem","getAuthorization","getItem","storeUserName","getUserName","userLogout","clear","navigate","storeUserRole","role","getUserRole","getAllBlogList","get","getBlogById","id","updateBlog","blogId","categoryId","put","addCommentToBlog","userId","getCommentByBlogId","deleteBlogById","delete","getCategoryList","category","storeLoggedInUserInformation","user","getLoggedInUserInformation","createBlog","factory","providedIn"],"sourceRoot":"","sources":["D:\\BLOG_PROJ\\Blog_frontend\\src\\app\\components\\service\\blog-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BlogService {\n\n  url: string = 'http://localhost:9070';\n\n\ncategory: any = [{\n  name: \"INFORMATION\" , value: 0,\n}, {\n  name: \"SPORTS\", value: 1,\n}, {\n  name: \"FUN\", value: 2\n}, {\n  name: \"DEVOTIONAL\", value:  3\n}, {\n  name: \"POLITICS\", value:  4\n}, {\n  name: \"JOBS\", value:  5\n}\n];\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) { }\n\n  /* Client Registeration */\n  signUp(body: any): Observable<any> {\n    return this.http.post(this.url + \"/api/blog/signup\", body);\n  }\n  //client login\n  clientSignIn(body: any): Observable<any> {\n\n    return this.http.post(this.url + \"/api/blog/login\", body );\n  }\n\n  storeAuthorization(token: string): void {\n    localStorage.setItem(\"token\", token);\n  }\n\n  // This is userId\n  getAuthorization(): any {\n    const token = localStorage.getItem(\"token\");\n    return token;\n  }\n\n  storeUserName(name: string): void {\n    localStorage.setItem(\"userName\", name);\n  }\n\n  getUserName(): any {\n    const name = localStorage.getItem(\"userName\");\n    return name;\n  }\n\n  userLogout(): void {\n    localStorage.clear();\n    this.router.navigate(['']);\n  }\n\n  storeUserRole(role: string): void {\n    localStorage.setItem(\"role\", role);\n  }\n\n  getUserRole(): any {\n    const role = localStorage.getItem(\"role\");\n    return role;\n  }\n\n  getAllBlogList(): Observable<any> {\n    return this.http.get(this.url + \"/api/blog/posts\");\n  }\n\n  getBlogById(id: any): Observable<any> {\n    return this.http.get(this.url + \"/api/blog/post/\"+id);\n  }\n\n  updateBlog(body: any, blogId: any, categoryId: any): Observable<any> {\n    return this.http.put(this.url + \"/api/blog/post/\"+blogId+\"/\"+ categoryId, body);\n  }\n\n  addCommentToBlog(body: any, blogId: any, userId: any): Observable<any> {\n    return this.http.post(this.url + \"/api/blog/comment/\"+blogId+\"/\"+ userId, body);\n  }\n\n  getCommentByBlogId(id: any): Observable<any> {\n    return this.http.get(this.url + \"/api/blog/comment/\"+id);\n  }\n\n  deleteBlogById(id: any): Observable<any> {\n    return this.http.delete(this.url + \"/api/blog/post/\"+id);\n  }\n\n  getCategoryList(): any {\n    return this.category;\n  }\n\n  storeLoggedInUserInformation(user: any): void {\n    localStorage.setItem('user', user);\n  }\n\n  getLoggedInUserInformation(): any {\n    return localStorage.getItem('user');\n  }\n\n  createBlog(body: any): Observable<any> {\n    return this.http.post(this.url + \"/api/blog/post/\", body);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}